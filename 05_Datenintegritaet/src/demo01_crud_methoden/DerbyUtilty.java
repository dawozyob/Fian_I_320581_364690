package demo01_crud_methoden;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import ressource.ResourceLoader;

public class DerbyUtilty {
	/*
	 * A connection (session) with a specific database. SQL statements are executed
	 * and results are returned within the context of a connection.
	 * 
	 * Das Connection Objekt ist fuer die Verbindung zur Datenbank zustaendig
	 */
	Connection c1;
	/*
	 * DriverManager: The basic service for managing a set of JDBC drivers.
	 * 
	 * DriverManager.getConnection(url): Attempts to establish a connection to the
	 * given database URL.The DriverManager attempts to select an appropriate driver
	 * from the set of registered JDBC drivers.
	 */
	DriverManager dm;
	/*
	 * The object used for executing a static SQL statement and returning the
	 * results it produces.
	 */
	Statement stm;

	/*
	 * An object that represents a precompiled SQL statement.
	 * 
	 * A SQL statement is precompiled and stored in a PreparedStatement object. This
	 * object can then be used to efficiently execute this statement multiple times.
	 * 
	 */
	PreparedStatement pstm;

	/*
	 * A table of data representing a database result set, which is usually
	 * generated by executing a statement that queries the database.
	 */
	ResultSet res;

	public static Connection getConnectionInMemoryDatabase() throws SQLException {
		// Die Adresse der Datenbank
		String url = "jdbc:derby:memory:myDerby;create=true";
		return DriverManager.getConnection(url);
	}

	public static void createTestTable(Connection c) {
		try {
			/*
			 * c.createStatement(): Creates a Statement object for sending SQL statements to
			 * the database. SQL statements without parameters are normally executed using
			 * Statement objects.
			 */
			Statement stm = c.createStatement();
			String sql = ResourceLoader.loadText("derby_create_table_personen.sql");
			stm.execute(sql);
			System.out.println("Tabelle erzeugt");
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public static void fillTestTable(Connection c) {
		String sql = ResourceLoader.loadText("derby_preparestatement_table_personen.sql");
		String sql1 = "INSERT INTO personen (vorname, nachname, geburtsjahr) VALUES (?, ?, ?)";
		try {
			PreparedStatement stm = c.prepareStatement(sql1);
			stm.setString(1, "Maria");
			stm.setString(2, "Musterfrau");
			stm.setInt(3, 1977);
			stm.executeUpdate();

			stm.setString(1, "Max");
			stm.setString(2, "Mustermann");
			stm.setInt(3, 1966);
			stm.executeUpdate();

			stm.setString(1, "Hildegard");
			stm.setString(2, "Mueller");
			stm.setInt(3, 1955);
			stm.executeUpdate();

			stm.setString(1, "Fred");
			stm.setString(2, "Feuerstein");
			stm.setInt(3, 1944);
			stm.executeUpdate();

			System.out.println("Eintraege erstellt");
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	public static void printTestTable(Connection c) {
		try {
			Statement stm = c.createStatement();
			stm.execute("SELECT * FROM personen");
			ResultSet res = stm.getResultSet();
			System.out.printf(" id | %12s | %12s | %12s %n", "vorname", "nachname", "geburtsjahr");
			/*
			 * Moves the cursor forward one row from its current position.A ResultSet cursor
			 * is initially positioned before the first row; the first call to the method
			 * next makes the first row the current row; thesecond call makes the second row
			 * the current row, and so on.
			 */
			while (res.next()) {
				System.out.printf("%3d | %12s | %12s | %12d %n", res.getInt(1), res.getString(2), res.getString(3),
						res.getInt(4));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

}
